from __future__ import division
import operator

from mrjob.job import MRJob
from mrjob.step import MRStep
from mrjob.protocol import JSONValueProtocol
import time
import tools

INPUT_LABEL = 0
BUSINESS_CATEGORIES = 1
BUSINESS_STARS = 1
REVIEW_ID = 1
REVIEW_STARS = 2
LIST_SIZE = 5

class ImpactPerBuiness(MRJob):
    INPUT_PROTOCOL = JSONValueProtocol

    def initial_map(self, _, line):
        data = line
        # business_id, ["review", user_id, stars]
        COUPONS = tools.read_coupons_file()
        if any(word in data['text'].lower() for word in COUPONS):
            yield data["business_id"], ["review_c", data["review_id"], data["stars"] ]
        else:
            yield data["business_id"], ["review", data["review_id"], data["stars"] ]

    def reduce_business_and_get_average_stars(self, business_id, values):
        business_list = list(values)
        stars_with_coupon = []
        stars_without_coupon = []
        for business in business_list:
            if business[INPUT_LABEL] == "review_c":
                stars_with_coupon.append(business[REVIEW_STARS])
            elif business[INPUT_LABEL] == "review":
                stars_without_coupon.append(business[REVIEW_STARS])
        if  len(stars_with_coupon) > 0 and len(stars_without_coupon) > 0:
            difference = reduce(lambda x, y: x + y, stars_with_coupon) / len(stars_with_coupon) - reduce(lambda x, y: x + y, stars_without_coupon) / len(stars_without_coupon)
            yield 1, difference

    def reduce_average_difference(self, key, values):
        differences = list(values)
        avg_diff = reduce(lambda x, y: x + y, differences) / len(differences)
        yield "AVG DIFF", avg_diff

    def steps(self):
        return [
            MRStep(
                mapper=self.initial_map,
                reducer=self.reduce_business_and_get_average_stars
                ),
            MRStep(
                reducer=self.reduce_average_difference
                )
            ]

if __name__ == '__main__':
    start_time = time.time()
    ImpactPerBuiness.run()
    print 'Time lapsed: {} seconds.'.format(time.time() - start_time)
